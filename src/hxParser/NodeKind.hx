// This file is autogenerated from ParseTree data structures
// Use build-walker.hxml to re-generate!

package hxParser;

import hxParser.ParseTree;

enum NodeKind {
	NAbstractRelation_PFrom(_from:Token, type:NComplexType);
	NAbstractRelation_PTo(_to:Token, type:NComplexType);
	NAnnotations(node:NAnnotations);
	NAnonymousTypeField(node:NAnonymousTypeField);
	NAnonymousTypeFields_PAnonymousClassFields(fields:Array<NClassField>);
	NAnonymousTypeFields_PAnonymousShortFields(fields:Null<NCommaSeparatedAllowTrailing<NAnonymousTypeField>>);
	NAssignment(node:NAssignment);
	NBlockElement_PExpr(e:NExpr, semicolon:Token);
	NBlockElement_PInlineFunction(_inline:Token, _function:Token, f:NFunction, semicolon:Token);
	NBlockElement_PVar(_var:Token, vl:NCommaSeparated<NVarDeclaration>, semicolon:Token);
	NCallArgs(node:NCallArgs);
	NCase_PCase(_case:Token, patterns:NCommaSeparated<NExpr>, guard:Null<NGuard>, colon:Token, el:Array<NBlockElement>);
	NCase_PDefault(_default:Token, colon:Token, el:Array<NBlockElement>);
	NCatch(node:NCatch);
	NClassDecl(node:NClassDecl);
	NClassField_PFunctionField(annotations:NAnnotations, modifiers:Array<NModifier>, _function:Token, name:Token, params:Null<NTypeDeclParameters>, popen:Token, args:Null<NCommaSeparated<NFunctionArgument>>, pclose:Token, typeHint:Null<NTypeHint>, e:Null<NFieldExpr>);
	NClassField_PPropertyField(annotations:NAnnotations, modifiers:Array<NModifier>, _var:Token, name:Token, popen:Token, get:Token, comma:Token, set:Token, pclose:Token, typeHint:Null<NTypeHint>, assignment:Null<NAssignment>);
	NClassField_PVariableField(annotations:NAnnotations, modifiers:Array<NModifier>, _var:Token, name:Token, typeHint:Null<NTypeHint>, assignment:Null<NAssignment>, semicolon:Token);
	NClassRelation_PExtends(_extends:Token, path:NTypePath);
	NClassRelation_PImplements(_implements:Token, path:NTypePath);
	NCommonFlag_PExtern(token:Token);
	NCommonFlag_PPrivate(token:Token);
	NComplexType_PAnonymousStructure(bropen:Token, fields:NAnonymousTypeFields, brclose:Token);
	NComplexType_PFunctionType(type1:NComplexType, arrow:Token, type2:NComplexType);
	NComplexType_POptionalType(questionmark:Token, type:NComplexType);
	NComplexType_PParenthesisType(popen:Token, ct:NComplexType, pclose:Token);
	NComplexType_PStructuralExtension(bropen:Token, types:Array<NStructuralExtension>, fields:NAnonymousTypeFields, brclose:Token);
	NComplexType_PTypePath(path:NTypePath);
	NConst_PConstIdent(ident:Token);
	NConst_PConstLiteral(literal:NLiteral);
	NConstraints_PMultipleConstraints(colon:Token, popen:Token, types:NCommaSeparated<NComplexType>, pclose:Token);
	NConstraints_PSingleConstraint(colon:Token, type:NComplexType);
	NDecl_PAbstractDecl(annotations:NAnnotations, flags:Array<NCommonFlag>, _abstract:Token, name:Token, params:Null<NTypeDeclParameters>, underlyingType:Null<NUnderlyingType>, relations:Array<NAbstractRelation>, bropen:Token, fields:Array<NClassField>, brclose:Token);
	NDecl_PClassDecl(annotations:NAnnotations, flags:Array<NCommonFlag>, c:NClassDecl);
	NDecl_PEnumDecl(annotations:NAnnotations, flags:Array<NCommonFlag>, _enum:Token, name:Token, params:Null<NTypeDeclParameters>, bropen:Token, fields:Array<NEnumField>, brclose:Token);
	NDecl_PImportDecl(_import:Token, importPath:NImport, semicolon:Token);
	NDecl_PTypedefDecl(annotations:NAnnotations, flags:Array<NCommonFlag>, _typedef:Token, name:Token, params:Null<NTypeDeclParameters>, assign:Token, type:NComplexType, semicolon:Null<Token>);
	NDecl_PUsingDecl(_using:Token, path:NPath, semicolon:Token);
	NDotIdent_PDot(_dot:Token);
	NDotIdent_PDotIdent(name:Token);
	NEnumField(node:NEnumField);
	NEnumFieldArg(node:NEnumFieldArg);
	NEnumFieldArgs(node:NEnumFieldArgs);
	NExprElse(node:NExprElse);
	NExpr_PArray(e1:NExpr, bkopen:Token, e2:NExpr, bkclose:Token);
	NExpr_PArrayDecl(bkopen:Token, el:Null<NCommaSeparatedAllowTrailing<NExpr>>, bkclose:Token);
	NExpr_PBinop(e1:NExpr, op:Token, e2:NExpr);
	NExpr_PBlock(bropen:Token, elems:Array<NBlockElement>, brclose:Token);
	NExpr_PBreak(_break:Token);
	NExpr_PCall(e:NExpr, el:NCallArgs);
	NExpr_PCheckType(popen:Token, e:NExpr, colon:Token, type:NComplexType, pclose:Token);
	NExpr_PConst(const:NConst);
	NExpr_PContinue(_continue:Token);
	NExpr_PDo(_do:Token, e1:NExpr, _while:Token, popen:Token, e2:NExpr, pclose:Token);
	NExpr_PDollarIdent(ident:Token);
	NExpr_PField(e:NExpr, ident:NDotIdent);
	NExpr_PFor(_for:Token, popen:Token, e1:NExpr, pclose:Token, e2:NExpr);
	NExpr_PFunction(_function:Token, f:NFunction);
	NExpr_PIf(_if:Token, popen:Token, e1:NExpr, pclose:Token, e2:NExpr, elseExpr:Null<NExprElse>);
	NExpr_PIn(e1:NExpr, _in:Token, e2:NExpr);
	NExpr_PIntDot(int:Token, dot:Token);
	NExpr_PIs(popen:Token, e:NExpr, _is:Token, path:NTypePath, pclose:Token);
	NExpr_PMacro(_macro:Token, e:NMacroExpr);
	NExpr_PMacroEscape(ident:Token, bropen:Token, e:NExpr, brclose:Token);
	NExpr_PMetadata(metadata:NMetadata, e:NExpr);
	NExpr_PNew(_new:Token, path:NTypePath, el:NCallArgs);
	NExpr_PObjectDecl(bropen:Token, fl:NCommaSeparatedAllowTrailing<NObjectField>, brclose:Token);
	NExpr_PParenthesis(popen:Token, e:NExpr, pclose:Token);
	NExpr_PReturn(_return:Token);
	NExpr_PReturnExpr(_return:Token, e:NExpr);
	NExpr_PSafeCast(_cast:Token, popen:Token, e:NExpr, comma:Token, ct:NComplexType, pclose:Token);
	NExpr_PSwitch(_switch:Token, e:NExpr, bropen:Token, cases:Array<NCase>, brclose:Token);
	NExpr_PTernary(e1:NExpr, questionmark:Token, e2:NExpr, colon:Token, e3:NExpr);
	NExpr_PThrow(_throw:Token, e:NExpr);
	NExpr_PTry(_try:Token, e:NExpr, catches:Array<NCatch>);
	NExpr_PUnaryPostfix(e:NExpr, op:Token);
	NExpr_PUnaryPrefix(op:Token, e:NExpr);
	NExpr_PUnsafeCast(_cast:Token, e:NExpr);
	NExpr_PUntyped(_untyped:Token, e:NExpr);
	NExpr_PVar(_var:Token, d:NVarDeclaration);
	NExpr_PWhile(_while:Token, popen:Token, e1:NExpr, pclose:Token, e2:NExpr);
	NFieldExpr_PBlockFieldExpr(e:NExpr);
	NFieldExpr_PExprFieldExpr(e:NExpr, semicolon:Token);
	NFieldExpr_PNoFieldExpr(semicolon:Token);
	NFile(node:NFile);
	NFunction(node:NFunction);
	NFunctionArgument(node:NFunctionArgument);
	NGuard(node:NGuard);
	NImport(node:NImport);
	NImportMode_PAllMode(dotstar:Token);
	NImportMode_PAsMode(_as:Token, ident:Token);
	NImportMode_PInMode(_in:Token, ident:Token);
	NLiteral_PLiteralFloat(token:Token);
	NLiteral_PLiteralInt(token:Token);
	NLiteral_PLiteralRegex(token:Token);
	NLiteral_PLiteralString(s:NString);
	NMacroExpr_PClass(c:NClassDecl);
	NMacroExpr_PExpr(e:NExpr);
	NMacroExpr_PTypeHint(type:NTypeHint);
	NMacroExpr_PVar(_var:Token, v:NCommaSeparated<NVarDeclaration>);
	NMetadata_PMetadata(name:Token);
	NMetadata_PMetadataWithArgs(name:Token, el:NCommaSeparated<NExpr>, pclose:Token);
	NModifier_PModifierDynamic(token:Token);
	NModifier_PModifierInline(token:Token);
	NModifier_PModifierMacro(token:Token);
	NModifier_PModifierOverride(token:Token);
	NModifier_PModifierPrivate(token:Token);
	NModifier_PModifierPublic(token:Token);
	NModifier_PModifierStatic(token:Token);
	NObjectField(node:NObjectField);
	NObjectFieldName_PIdent(ident:Token);
	NObjectFieldName_PString(string:NString);
	NPackage(node:NPackage);
	NPath(node:NPath);
	NString_PString(s:Token);
	NString_PString2(s:Token);
	NStructuralExtension(node:NStructuralExtension);
	NTypeDeclParameter(node:NTypeDeclParameter);
	NTypeDeclParameters(node:NTypeDeclParameters);
	NTypeHint(node:NTypeHint);
	NTypePath(node:NTypePath);
	NTypePathParameter_PArrayExprTypePathParameter(bkopen:Token, el:Null<NCommaSeparatedAllowTrailing<NExpr>>, bkclose:Token);
	NTypePathParameter_PConstantTypePathParameter(constant:NLiteral);
	NTypePathParameter_PTypeTypePathParameter(type:NComplexType);
	NTypePathParameters(node:NTypePathParameters);
	NUnderlyingType(node:NUnderlyingType);
	NVarDeclaration(node:NVarDeclaration);
}